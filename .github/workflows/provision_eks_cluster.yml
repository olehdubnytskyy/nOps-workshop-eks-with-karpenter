name: Provision nOps eks cluster with eksctl

on:
  workflow_dispatch:

env:
  CLUSTER_NAME: "nOps-eks-cluster-dev"

jobs:
  provision_eks:
    name: Provision eks cluster with Karpenter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up eksctl
        run: |
          curl --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Check EKS Cluster
        id: check-cluster
        run: |
          cluster_name="your-cluster-name"
          if aws eks describe-cluster --name $CLUSTER_NAME >/dev/null 2>&1; then
            echo "Cluster exists"
            echo "::set-output name=exists::true"
          else
            echo "Cluster does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Provision EKS cluster
        if: steps.check-cluster.outputs.exists == 'false'
        run: eksctl create cluster --config-file manifests/cluster.yaml

  karpenter_prerequisites:
    name: Setup Karpenter prerequisites
    runs-on: ubuntu-latest
    needs: provision_eks
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up eksctl
        run: |
          curl --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Set SUBNET_IDS environment variable
        id: get_subnet_ids
        run: |
          SUBNET_IDS=$(aws cloudformation describe-stacks \
            --stack-name eksctl-$CLUSTER_NAME-cluster \
            --query 'Stacks[].Outputs[?OutputKey==`SubnetsPrivate`].OutputValue' \
            --output text)
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV

          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

      - name: Create subnet tags
        run: |
          aws ec2 create-tags \
            --resources $(echo $SUBNET_IDS | tr ',' '\n') \
            --tags Key="kubernetes.io/cluster/$CLUSTER_NAME",Value=

      - name: Deploy CLoudFormation karpenter stack
        run: |
          aws cloudformation deploy \
          --stack-name Karpenter-$CLUSTER_NAME \
          --template-file manifests/karpenter.yaml \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides ClusterName=$CLUSTER_NAME

      - name: Create iamidentitymapping
        run: |
          eksctl create iamidentitymapping \
          --username system:node:{{EC2PrivateDNSName}} \
          --cluster $CLUSTER_NAME \
          --arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-$CLUSTER_NAME \
          --group system:bootstrappers \
          --group system:nodes

      - name: Create iamserviceaccount
        run: |
          eksctl create iamserviceaccount \
          --cluster $CLUSTER_NAME \
          --name karpenter \
          --namespace karpenter \
          --attach-policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/KarpenterControllerPolicy-$CLUSTER_NAME \
          --approve

      - name: Check IAM service-linked role
        id: check-role
        run: |
          role_name="AWSServiceRoleForEC2Spot"
          if aws iam get-role --role-name "$role_name" >/dev/null 2>&1; then
            echo "Role exists"
            echo "::set-output name=exists::true"
          else
            echo "Role does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create service-linked role if Not Exists
        if: steps.check-role.outputs.exists == 'false'
        run: |
          echo "Creating IAM Service-Linked Role..."
          aws iam create-service-linked-role --aws-service-name spot.amazonaws.com

      - name: Update kubectl config
        run: aws eks update-kubeconfig --name nOps-eks-cluster-dev --region us-east-1

      - name: Check nodes
        run: kubectl get nodes

      - name: Deploy app
        run: kubectl apply --filename manifests/app.yaml

      - name: Check nodes, pods
        run: kubectl get pods,nodes

  karpenter_installation:
    name: Install Karpenter
    runs-on: ubuntu-latest
    needs: karpenter_prerequisites
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set CLUSTER_ENDPOINT
        run: |
          CLUSTER_ENDPOINT=$(aws eks describe-cluster \
          --name $CLUSTER_NAME \
          --query "cluster.endpoint" \
          --output json)

          echo "CLUSTER_ENDPOINT=$CLUSTER_ENDPOINT" >> "$GITHUB_ENV"

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Add helm repo
        run: helm repo add karpenter https://charts.karpenter.sh

      - name: Update helm repo
        run: helm repo update

      - name: Update kubectl config
        run: aws eks update-kubeconfig --name nOps-eks-cluster-dev --region us-east-1

      - name: Install karpenter
        run: |
          helm upgrade --install \
          karpenter karpenter/karpenter \
          --namespace karpenter \
          --create-namespace \
          --set serviceAccount.create=false \
          --version 0.5.0 \
          --set controller.clusterName=$CLUSTER_NAME \
          --set controller.clusterEndpoint=$CLUSTER_ENDPOINT \
          --wait

      - name: check karpenter resources
        run: kubectl --namespace karpenter get all

  scale_up_kubernetes_cluster_with_karpenter:
    name: Scale up EKS cluster with karpenter
    runs-on: ubuntu-latest
    needs: karpenter_installation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubectl config
        run: aws eks update-kubeconfig --name nOps-eks-cluster-dev --region us-east-1

      - name: Deploy kerpenter provisioner
        run: kubectl apply --filename manifests/provisioner.yaml

      - name: Check nodes, pods
        run: kubectl get pods,nodes

      - name: Check karpenter controller logs
        run: kubectl --namespace karpenter logs --selector karpenter=controller
